import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, Message
)
from aiogram.utils.markdown import hbold, hitalic

from config import (
    TOKEN, EVENT_NAME, EVENT_DATE, EVENT_LOCATION, EVENT_ADDRESS,
    RESPONSE_TEXTS, REGISTRATION_LINKS, VK_GROUP, TICKETS_URL,
    VERSION_FILE, BOT_VERSION, OPENAI_API_KEY, GITHUB_REPO
)
from schedulers import setup_schedulers
from auto_updater import AutoUpdater

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"),
            KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        ],
        [
            KeyboardButton(text="üé≠ –ö–æ—Å–ø–ª–µ–π-—à–æ—É"),
            KeyboardButton(text="üíé –ú–∞—Ä–∫–µ—Ç")
        ],
        [
            KeyboardButton(text="‚ùì FAQ"),
            KeyboardButton(text="üì± –°–æ—Ü—Å–µ—Ç–∏")
        ],
        [
            KeyboardButton(text="üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            KeyboardButton(text="ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        ]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: Message):
    welcome_text = f"""ü§ñ {hbold(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ {EVENT_NAME}!")}

–≠—Ç–æ –±—ã–ª –¥–æ–ª–≥–∏–π –ø—É—Ç—å, –Ω–µ —Ç–∞–∫ –ª–∏? 
–ü—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è, —Ç—ã –∫–∞–∫ —Ä–∞–∑ —É—Å–ø–µ–ª –∫ —Å–∞–º–æ–º—É –Ω–∞—á–∞–ª—É, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥))

‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø

{hbold("–ù–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ò –í–ê–° –û–ñ–ò–î–ê–Æ–¢:")}
‚Ä¢ üéÅ –ü–æ–¥–∞—Ä–∫–∏ –∫ –∫–∞–∂–¥–æ–º—É –±–∏–ª–µ—Ç—É!
‚Ä¢ üé≠ –ö–æ–Ω–∫—É—Ä—Å–Ω–æ–µ –∫–æ—Å–ø–ª–µ–π-–¥–µ—Ñ–∏–ª–µ —Å –∫—Ä—É—Ç—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏!
‚Ä¢ üíé –ú–∞—Ä–∫–µ—Ç —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –º–µ—Ä—á–æ–º –ø–æ –ª–æ—Ñ–¥ –æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤!
‚Ä¢ üì∏ –§–æ—Ç–æ-–∑–æ–Ω—ã
‚Ä¢ üåä –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ª–∞—É–Ω–¥–∂-–∑–æ–Ω–∞ —Å –≤—ã—Ö–æ–¥–æ–º –∫ –∑–∞–ª–∏–≤—É
‚Ä¢ üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã —Å –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏ –∏ –ø—Ä–∏–∑–∞–º–∏!
‚Ä¢ üéµ –ö–æ–Ω—Ü–µ—Ä—Ç –∏ –∞–≤—Ç–æ–≥—Ä–∞—Ñ-—Å–µ—Å—Å–∏—è —Å –≥—Ä—É–ø–ø–æ–π –í–æ—Å—Ö–æ–¥!
‚Ä¢ üçπ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∏–Ω–∏-–±–∞—Ä —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ —Å–µ–∑–æ–Ω–æ–≤!
‚Ä¢ üç± –í–∫—É—Å–Ω–µ–π—à–∏–π —è–ø–æ–Ω—Å–∫–∏–π —Å—Ç—Ä–∏—Ç-—Ñ—É–¥

{hbold("–î–∞—Ç–∞:")} {EVENT_DATE}
{hbold("–ú–µ—Å—Ç–æ:")} {EVENT_LOCATION}
{hbold("–ê–¥—Ä–µ—Å:")} {EVENT_ADDRESS}

‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø‚ûø

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá"""

    await message.answer(welcome_text, reply_markup=main_menu, parse_mode="HTML")

@dp.message()
async def handle_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text
    menu_commands = {
        "üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç": "tickets",
        "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ": "schedule",
        "üé≠ –ö–æ—Å–ø–ª–µ–π-—à–æ—É": "cosplay",
        "üíé –ú–∞—Ä–∫–µ—Ç": "market",
        "‚ùì FAQ": "faq",
        "üì± –°–æ—Ü—Å–µ—Ç–∏": "social",
        "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "support",
        "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç": "ai_assistant"
    }
    
    if text in menu_commands:
        section = menu_commands[text]
        if section == "ai_assistant":
            await show_ai_assistant_message(message)
        else:
            keyboard = get_section_keyboard(section)
            await message.answer(
                RESPONSE_TEXTS[section],
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

def get_section_keyboard(section: str) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
    keyboards = {
        "tickets": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url=TICKETS_URL)],
            [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è", url="https://t.me/lolofest2025/41")]
        ]),
        "cosplay": InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –°–æ–ª–æ", url=REGISTRATION_LINKS['cosplay_solo']),
                InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞", url=REGISTRATION_LINKS['cosplay_group'])
            ],
            [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞", url="https://t.me/lolofest2025/233")]
        ]),
        "market": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=REGISTRATION_LINKS['market'])],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://t.me/lolofest2025/236")]
        ]),
        "social": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=VK_GROUP)],
            [InlineKeyboardButton(text="Telegram", url="https://t.me/lolofest2025")]
        ]),
        "support": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É", url="https://t.me/cookie_snake")],
            [InlineKeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", url="https://t.me/lolofest2025/rules")]
        ])
    }
    return keyboards.get(section)

async def show_ai_assistant_message(message: Message):
    """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ"""
    ai_message = """ü§ñ *AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ü.–ï.–†.–°.–ò.–ö.*

üí° *–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ!*

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
‚Ä¢ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö
‚Ä¢ –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
‚Ä¢ –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã

_{–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç}_"""

    await message.answer(ai_message, parse_mode="Markdown")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–∞–ø–¥–µ–π—Ç–µ—Ä–∞
    updater = AutoUpdater(
        github_repo=GITHUB_REPO,
        current_version=BOT_VERSION,
        version_file=VERSION_FILE
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await updater.check_for_updates()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await setup_schedulers()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è Windows
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    try:
        bot = BotHandler()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == '__main__':
    run_bot()
